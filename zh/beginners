知识点1：
void(*g_defaultGflagsExitFunc)(int) = nullptr;  这个代码是啥意思？

这段代码定义了一个函数指针，并将其初始化为 nullptr。让我们逐步解析这段代码：

函数指针声明：
void(*g_defaultGflagsExitFunc)(int)

void：表示函数的返回类型是 void，即没有返回值。
(*g_defaultGflagsExitFunc)：表示这是一个指向函数的指针，指针的名称是 g_defaultGflagsExitFunc。
(int)：表示这个函数指针指向的函数接受一个 int 类型的参数。
初始化为 nullptr：
= nullptr;

nullptr 是 C++11 引入的关键字，用于表示空指针。它比传统的 NULL 更加类型安全。
综合起来，这段代码的意思是：定义一个名为 g_defaultGflagsExitFunc 的函数指针，它指向一个接受 int 参数且没有返回值的函数，并将这个指针初始化为 nullptr，表示当前没有指向任何实际的函数。

示例
假设你有一个函数如下：

void myExitFunction(int code) {
    // 处理退出逻辑
}

你可以将 g_defaultGflagsExitFunc 指向这个函数：

g_defaultGflagsExitFunc = myExitFunction;

然后在需要调用这个函数时，可以这样做：

if (g_defaultGflagsExitFunc != nullptr) {
    g_defaultGflagsExitFunc(0); // 调用函数并传递参数
}

这样，你就可以通过 g_defaultGflagsExitFunc 来调用 myExitFunction，并且在不需要时将其设置为 nullptr 来表示没有函数需要调用。


知识点2：
g_appName = std::move(appName);  解释这个代码

这段代码使用了 std::move 将 appName 的资源移动到 g_appName。让我们逐步解析这段代码：

std::move：
std::move 是 C++11 引入的一个标准库函数，用于将一个对象转换为右值引用（rvalue reference）。
右值引用允许对象的资源被“移动”而不是复制，从而提高性能，特别是在处理大型对象或资源时。
g_appName = std::move(appName);：
g_appName 是一个变量，可能是一个字符串或其他支持移动语义的类型。
appName 是另一个变量，类型与 g_appName 相同。
std::move(appName) 将 appName 转换为右值引用，表示其资源可以被移动。
赋值操作 g_appName = std::move(appName); 将 appName 的资源移动到 g_appName，而不是复制。这意味着 g_appName 将接管 appName 的资源，而 appName 将被置于一个有效但未指定的状态123。
示例
假设 g_appName 和 appName 是 std::string 类型：

std::string g_appName;
std::string appName = "ExampleApp";

g_appName = std::move(appName);

在这段代码执行后：

g_appName 将包含 "ExampleApp"。
appName 将变为空字符串，因为它的资源已经被移动到 g_appName。
优点
使用 std::move 可以避免不必要的深度拷贝，提高程序的性能，特别是在处理大型对象时。
